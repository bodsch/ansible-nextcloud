---

- name: merge dependencies between defaults and custom
  ansible.builtin.set_fact:
    nextcloud_dependencies: "{{ nextcloud_dependencies + nextcloud_packages }}"
  when:
    - nextcloud_dependencies | count > 0 or
      nextcloud_packages | count > 0

- name: define directories
  ansible.builtin.set_fact:
    nextcloud_directories: "{{ nextcloud_defaults | nc_directories }}"

- name: create remote nextcloud directories
  ansible.builtin.file:
    state: directory
    mode: 0770
    group: "{{ nextcloud_group }}"
    path: "{{ item }}"
  loop: "{{ nextcloud_directories }}"
  loop_control:
    label: "{{ item }}"
  when:
    - nextcloud_directories is defined
    - nextcloud_directories | count > 0

# TODO
# verify memcache and redis configuration with installed packages

# - name: get installed database package name
#   bodsch.core.package_version:
#     package_name: "{{ _nextcloud_package_mariadb_clients }}"
#     state: installed
#   register: package_version
#
# - name: remove mariadb-client-core from dependency list if it already installed
#   ansible.builtin.set_fact:
#     nextcloud_dependencies: "{{ nextcloud_dependencies | reject('search', 'default-mysql-client-core') | list }}"
#   when:
#     - package_version is defined
#     - package_version.available is defined
#     - package_version.available.full_version is defined

- name: install dependencies
  ansible.builtin.package:
    name: "{{ nextcloud_dependencies }}"
    state: present

# get file or directory stats
- name: detect installed nextcloud
  ansible.builtin.stat:
    path: "{{ nextcloud_install_base_directory }}/nextcloud-{{ nextcloud_version }}/lib/versioncheck.php"
    get_checksum: false
    get_mime: false
    get_attributes: false
  register: __stat_present_nextcloud
  changed_when: not __stat_present_nextcloud.stat.exists

- name: detect type of {{ nextcloud_install_base_directory }}/server
  ansible.builtin.stat:
    path: "{{ nextcloud_install_base_directory }}/server"
    get_checksum: false
    # get_mime: false
    get_attributes: false
  register: __stat_share_nextcloud

# this should be a link!
- name: remove directory '{{ nextcloud_install_base_directory }}'
  ansible.builtin.file:
    state: absent
    path: "{{ nextcloud_install_base_directory }}/server"
  when:
    - __stat_share_nextcloud.stat is defined
    - __stat_share_nextcloud.stat.isdir | default('true')

- name: install nextcloud
  when:
    - not __stat_present_nextcloud.stat.exists
  block:
    - name: create remote temp directory
      ansible.builtin.file:
        path: "{{ nextcloud_remote_tmp_directory }}"
        state: directory
        mode: 0755
      when:
        - not nextcloud_direct_download

    - name: deploy application archiv
      ansible.builtin.copy:
        src: "{{ nextcloud_local_tmp_directory }}/{{ nextcloud_release.file }}"
        dest: "{{ nextcloud_remote_tmp_directory }}/"
        mode: 0700

    - name: create remote install directory
      ansible.builtin.file:
        state: directory
        path: "{{ nextcloud_install_base_directory }}/nextcloud-{{ nextcloud_version }}"
        owner: "{{ nextcloud_owner }}"
        group: "{{ nextcloud_group }}"
        mode: 0755

    - name: extract nextcloud archive
      ansible.builtin.unarchive:
        src: "{{ nextcloud_remote_tmp_directory }}/{{ nextcloud_release.file }}"
        dest: "{{ nextcloud_install_base_directory }}/nextcloud-{{ nextcloud_version }}/"
        owner: "{{ nextcloud_owner }}"
        group: "{{ nextcloud_group }}"
        mode: 0755
        remote_src: true
        extra_opts:
          - --strip-components=1
      notify:
        - restart php-fpm
  rescue:
    - name: remove installation directory
      ansible.builtin.file:
        state: absent
        path: "{{ nextcloud_install_base_directory }}/nextcloud-{{ nextcloud_version }}"

    - name: remove link to installation directory
      ansible.builtin.file:
        state: absent
        path: "{{ nextcloud_install_base_directory }}/nextcloud"

    - name: exit with fail
      ansible.builtin.fail:
        msg: "Error while installing of nextcloud!"

- name: enable config write
  ansible.builtin.file:
    state: directory
    mode: 0777
    owner: "{{ nextcloud_owner }}"
    group: "{{ nextcloud_group }}"
    path: "{{ nextcloud_install_base_directory }}/nextcloud-{{ nextcloud_version }}/config"

- name: create link for nextcloud-version {{ nextcloud_version }} to {{ nextcloud_install_base_directory }}/server
  ansible.builtin.file:
    src: '{{ nextcloud_install_base_directory }}/nextcloud-{{ nextcloud_version }}'
    dest: '{{ nextcloud_install_base_directory }}/server'
    owner: "{{ nextcloud_owner }}"
    group: "{{ nextcloud_group }}"
    mode: 0755
    state: link
    force: true
  notify:
    - restart php-fpm

- name: create custom fact file
  bodsch.core.facts:
    name: nextcloud
    facts:
      version: "{{ nextcloud_version }}"
      instande_id: "{{ nextcloud_instande_id }}"

- name: python support
  when:
    - nextcloud_python_packages is defined
    - nextcloud_python_packages | count > 0
  block:
    - name: create pip requirements file
      bodsch.core.pip_requirements:
        name: nextcloud
        requirements: "{{ nextcloud_python_packages }}"
      register: pip_requirements

    - name: fail if pip not installed
      ansible.builtin.fail:
        msg: python pip is not installed
      when:
        - not pip_requirements.pip.present

    - name: install python packages  # noqa no-handler
      ansible.builtin.pip:
        requirements: "{{ pip_requirements.requirements_file }}"
        state: present
        extra_args: "{{ nextcloud_python_extra_args | default([]) | bodsch.core.python_extra_args(python_version=ansible_python.version) | default(omit) }}"
      when:
        - pip_requirements.requirements_file is defined
        - pip_requirements.changed

    - name: do facts module to get latest information
      ansible.builtin.setup:

  rescue:
    - name: remove pip requirements
      bodsch.core.pip_requirements:
        name: nextcloud
        requirements: "{{ nextcloud_python_packages }}"
        state: absent

    - name: pip requirements installation failed
      ansible.builtin.fail:
        msg: "{{ pip_install.msg }}"
      when:
        - pip_install.failed

...

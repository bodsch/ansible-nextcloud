---

- name: merge nextcloud configuration between defaults and custom
  ansible.builtin.set_fact:
    nextcloud_database: "{{ nextcloud_defaults_database | combine(nextcloud_database, recursive=True) }}"
    nextcloud_defaults: "{{ nextcloud_defaults_defaults | combine(nextcloud_defaults, recursive=True) }}"

- name: nextcloud custom data directory
  when:
    - nextcloud_defaults.data_directory is defined
    - nextcloud_defaults.data_directory | string | length > 0
  block:
    - name: create custom data directory
      ansible.builtin.file:
        state: directory
        mode: "0770"
        owner: "{{ nextcloud_owner }}"
        group: "{{ nextcloud_group }}"
        path: "{{ nextcloud_defaults.data_directory }}"

    - name: create .ocdata in custom data directory
      ansible.builtin.copy:
        dest: "{{ nextcloud_defaults.data_directory }}/.ocdata"
        content: ""
        mode: "0660"
        owner: "{{ nextcloud_owner }}"
        group: "{{ nextcloud_group }}"

- name: install nextcloud with base configuration
  nextcloud_occ:
    command: "maintenance:install"
    owner: "{{ nextcloud_owner }}"
    working_dir: "{{ nextcloud_install_base_directory }}/server"
    data_dir: "{{ nextcloud_defaults.data_directory }}"
    database:
      type: "{{ nextcloud_database.type }}"
      hostname: "{{ nextcloud_database.hostname | default(omit) }}"
      port: "{{ nextcloud_database.port | default(omit) }}"
      schema: "{{ nextcloud_database.schema | default(omit) }}"
      username: "{{ nextcloud_database.username | default(omit) }}"
      password: "{{ nextcloud_database.password | default(omit) }}"
    admin:
      username: "{{ nextcloud_admin.username | default('admin') }}"
      password: "{{ nextcloud_admin.password | default('admin') }}"
  register: nc_status

- name: installation state  # noqa no-handler
  ansible.builtin.debug:
    msg: "{{ nc_status }}"
  when:
    - nc_status.changed

- name: custom data directory
  when:
    - nc_status.changed
    - nextcloud_defaults.data_directory is defined
    - nextcloud_defaults.data_directory | string | length > 0
  block:
    - name: sync {{ nextcloud_install_base_directory }}/server/data to {{ nextcloud_defaults.data_directory }}
      bodsch.core.sync_directory:
        source_directory: "{{ nextcloud_install_base_directory }}/server/data"
        destination_directory: "{{ nextcloud_defaults.data_directory }}"
        arguments:
          verbose: true
          purge: false
      when:
        - nextcloud_defaults.data_directory is defined
        - nextcloud_defaults.data_directory | string | length > 0

    - name: fix rights and ownership
      ansible.builtin.file:
        path: "{{ nextcloud_defaults.data_directory }}"
        owner: "{{ nextcloud_owner }}"
        group: "{{ nextcloud_group }}"
        recurse: true

- name: write nextcloud import configuration
  nextcloud_config:
    working_dir: "{{ nextcloud_install_base_directory }}/server"
    owner: "{{ nextcloud_owner }}"
    group: "{{ nextcloud_group }}"
    diff_output: false
    config_parameters: "{{ nextcloud_defaults }}"
    trusted_domains: "{{ nextcloud_trusted_domains }}"
    database:
      type: "{{ nextcloud_database.type }}"
      hostname: "{{ nextcloud_database.hostname | default(omit) }}"
      port: "{{ nextcloud_database.port | default(omit) }}"
      schema: "{{ nextcloud_database.schema | default(omit) }}"
      username: "{{ nextcloud_database.username | default(omit) }}"
      password: "{{ nextcloud_database.password | default(omit) }}"
  register: nc_config

- name: configuration state  # noqa no-handler
  ansible.builtin.debug:
    msg: "{{ nc_config }}"
  when:
    - nc_config.changed

- name: create background cron job
  when:
    - nextcloud_background_jobs.state | default('disabled') == "enabled"
    - nextcloud_background_jobs.type is defined
    - nextcloud_background_jobs.type | string | lower in ["cron", "ajax", "webcron", "systemd"]
  block:
    - name: configure nextcloud background jobs
      nextcloud_occ:
        command: "background_job"
        type: "{{ 'cron' if nextcloud_background_jobs.type == 'systemd' else nextcloud_background_jobs.type }}"
        owner: "{{ nextcloud_owner }}"
        working_dir: "{{ nextcloud_install_base_directory }}/server"
      register: nc_status

    - name: remove cron file
      when:
        - not nextcloud_background_jobs.type | string == "cron"
      block:

        - name: detect old cron file
          ansible.builtin.stat:
            path: "/etc/cron.d/nextcloud-background-jobs"
            get_checksum: false
            get_attributes: false
          register: nextcloud_background_cron

        - name: remove cron job for background jobs
          ansible.builtin.cron:
            name: nextcloud background jobs
            job: "[ -e {{ nextcloud_install_base_directory }}/server/cron.php ] && php -f {{ nextcloud_install_base_directory }}/server/cron.php 2> /dev/null"
            user: "{{ nextcloud_owner }}"
            cron_file: nextcloud-background-jobs
            state: absent
          when:
            - nextcloud_background_cron.stat is defined
            - nextcloud_background_cron.stat.exists | default('false')

    - name: remove system unit file
      when:
        - not nextcloud_background_jobs.type | string == "systemd"
      block:

        - name: enable nextcloud background timer
          ansible.builtin.service:
            name: nextcloud-cron.timer
            enabled: false
            state: stopped

    - name: cron daemon
      when:
        - nextcloud_background_jobs.state | default('disabled') == "enabled"
        - nextcloud_background_jobs.daemon | default('') | string | length > 0
        - nextcloud_background_jobs.type is defined
        - nextcloud_background_jobs.type | string == "cron"
      block:

        - name: ensure cron daemon is installed
          ansible.builtin.package:
            name: "{{ nextcloud_background_jobs.daemon }}"
            state: present

        - name: create cron job for background jobs
          ansible.builtin.cron:
            name: nextcloud background jobs
            job: "[ -e {{ nextcloud_install_base_directory }}/server/cron.php ] && php -f {{ nextcloud_install_base_directory }}/server/cron.php 2> /dev/null"
            minute: "{{ nextcloud_background_jobs.cron.minute | default('*/5') }}"
            hour: "{{ nextcloud_background_jobs.cron.hour | default('*') }}"
            weekday: "{{ nextcloud_background_jobs.cron.weekday | default('*') }}"
            user: "{{ nextcloud_owner }}"
            cron_file: nextcloud-background-jobs
            state: present

    - name: systemd unit
      when:
        - nextcloud_background_jobs.state | default('disabled') == "enabled"
        - nextcloud_background_jobs.type is defined
        - nextcloud_background_jobs.type | string == "systemd"
      block:

        - name: create systemd unit file
          ansible.builtin.template:
            src: etc/init/systemd/nextcloud-cron.service.j2
            dest: "{{ systemd_lib_directory }}/nextcloud-cron.service"
            mode: "0644"
          notify:
            - daemon reload

        - name: create systemd timer file
          ansible.builtin.template:
            src: etc/init/systemd/nextcloud-cron.timer.j2
            dest: "{{ systemd_lib_directory }}/nextcloud-cron.timer"
            mode: "0644"
          notify:
            - daemon reload

        - name: enable nextcloud background timer
          ansible.builtin.service:
            name: nextcloud-cron.timer
            enabled: true
            state: started

...

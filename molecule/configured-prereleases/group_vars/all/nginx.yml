---

nginx_gzip:
  enabled: true

nginx_events:
  multi_accept: true

nginx_logformat:
  json_combined:
    format: |
      '{'
        '"time_local": "$time_local",'
        '"remote_addr": "$remote_addr",'
        '"remote_user": "$remote_user",'
        '"request": "$request",'
        '"status": "$status",'
        '"body_bytes_sent": "$body_bytes_sent",'
        '"request_time": "$request_time",'
        '"http_referrer": "$http_referer",'
        '"http_user_agent": "$http_user_agent"'
      '}';

nginx_vhosts:
  - name: nextcloud
    filename: 00-nextcloud.conf
    state: present
    enabled: true

    domains:
      - nextcloud.molecule.lan
      - nextcloud.molecule.local

    listen:
      - 443 ssl http2

    redirect:
      from_port: 80

    root_directory: "{{ nextcloud_install_base_directory }}/nextcloud/server"
    root_directory_create: false

    index:
      - index.php
      - index.html
      - /index.php$request_uri

    upstreams:
      - name: php-handler
        servers:
          - unix:/run/php/worker-01.sock

    logfiles:
      access:
        file: /var/log/nginx/nextcloud.molecule.lan/access.log
        loglevel: json_combined
      error:
        file: /var/log/nginx/nextcloud.molecule.lan/error.log
        loglevel: notice

    # enable ssl
    ssl:
      enabled: true
      certificate: /etc/snakeoil/molecule.lan/molecule.lan.crt
      certificate_key: /etc/snakeoil/molecule.lan/molecule.lan.key
      dhparam: /etc/snakeoil/molecule.lan/dh.pem


    locations:
      # Rule borrowed from `.htaccess` to handle Microsoft DAV clients
      "= /":
        options: |
          if ( $http_user_agent ~ ^DavClnt ) {
            return 302 /remote.php/webdav/$is_args$args;
          }

      "= /robots.txt":
        options: |
          allow all;
          log_not_found off;
          access_log off;

      # Make a regex exception for `/.well-known` so that clients can still
      # access it despite the existence of the regex rule
      # `location ~ /(\.|autotest|...)` which would otherwise handle requests
      # for `/.well-known`.
      "^~ /.well-known":
        options: |
          # The rules in this block are an adaptation of the rules
          # in `.htaccess` that concern `/.well-known`.

          location = /.well-known/carddav { return 301 /remote.php/dav/; }
          location = /.well-known/caldav  { return 301 /remote.php/dav/; }

          location /.well-known/acme-challenge    { try_files $uri $uri/ =404; }
          location /.well-known/pki-validation    { try_files $uri $uri/ =404; }

          # Let Nextcloud's API for `/.well-known` URIs handle all other
          # requests by passing them to the front-end controller.
          return 301 /index.php$request_uri;


      # Rules borrowed from `.htaccess` to hide certain paths from clients
      "~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)":
        options: |
          return 404;

      "~ ^/(?:\\.|autotest|occ|issue|indie|db_|console)":
        option: |
          return 404;

      # Ensure this block, which passes PHP files to the PHP process, is above the blocks
      # which handle static assets (as seen below). If this block is not declared first,
      # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`
      # to the URI, resulting in a HTTP 500 error response.
      "~ \\.php(?:$|/)":
        options: |
          # Required for legacy support
          rewrite ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+|.+\/richdocumentscode\/proxy) /index.php$request_uri;

          fastcgi_split_path_info ^(.+?\.php)(/.*)$;
          set $path_info $fastcgi_path_info;

          try_files $fastcgi_script_name =404;

          include fastcgi_params;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          fastcgi_param PATH_INFO $path_info;
          # fastcgi_param HTTPS on;

          fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice
          fastcgi_param front_controller_active true;     # Enable pretty urls
          fastcgi_pass php-handler;

          fastcgi_intercept_errors on;
          fastcgi_request_buffering off;

      "~ \\.(?:css|js|svg|gif)$":
        options: |
          try_files $uri /index.php$request_uri;
          expires 6M;         # Cache-Control policy borrowed from `.htaccess`
          access_log off;     # Optional: Don't log access to assets

      "~ \\.woff2?$":
        options: |
          try_files $uri /index.php$request_uri;
          expires 7d;         # Cache-Control policy borrowed from `.htaccess`
          access_log off;     # Optional: Don't log access to assets

      # Rule borrowed from `.htaccess`
      "/remote":
        options: |
          return 301 /remote.php$request_uri;

      "/":
        options: |
          add_header Referrer-Policy                      "no-referrer"   always;
          add_header X-Content-Type-Options               "nosniff"       always;
          add_header X-Download-Options                   "noopen"        always;
          add_header X-Frame-Options                      "SAMEORIGIN"    always;
          add_header X-Permitted-Cross-Domain-Policies    "none"          always;
          add_header X-Robots-Tag                         "none"          always;
          add_header X-XSS-Protection                     "1; mode=block" always;

          try_files $uri $uri/ /index.php$request_uri;
